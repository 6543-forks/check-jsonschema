[tox]
envlist =
    cov-clean
    cov-report
    py{310,39,38,37}
    py{37,310}-{json5,pyjson5,tomli}
    py{37,310}{,-tomli}-format
skip_missing_interpreters = true
minversion = 3.0.0

[testenv]
usedevelop = true
extras = dev
deps =
    json5: json5
    pyjson5: pyjson5
    tomli: tomli
    format: jsonschema[format]
commands = pytest --cov=src --cov-append --cov-report= {posargs}
depends =
    py{37,38,39,310}{,-json5,-pyjson5,-tomli}: cov-clean
    cov-report: py{37,38,39,310}{,-json5,-pyjson5,-tomli}

[testenv:cov-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:cov-report]
deps = coverage
skip_install = true
commands = coverage report --skip-covered

[testenv:mypy]
deps = mypy
       types-jsonschema
       types-requests
commands = mypy src/ {posargs}

[testenv:twine-check]
skip_install = true
deps = twine
       build
whitelist_externals = rm
commands_pre = rm -rf dist/
# check that twine validating package data works
commands = python -m build
           twine check dist/*

[testenv:vendor-schemas]
deps = pre-commit
commands = python ./scripts/vendor-schemas.py

[testenv:generate-hooks-config]
commands = python ./scripts/generate-hooks-config.py

[testenv:publish-release]
skip_install = true
deps = twine
       build
# clean the build dir before rebuilding
whitelist_externals = rm
commands_pre = rm -rf dist/
commands = python -m build
           twine upload dist/*

[pytest]
filterwarnings = error
